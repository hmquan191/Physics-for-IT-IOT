[
    {
        "id": "ee3c28a49a9232a5",
        "type": "tab",
        "label": "Sign Up ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c2bd6d05e17f1aeb",
        "type": "tab",
        "label": "Login",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "4a7095bf9f591689",
        "type": "tab",
        "label": "Temperature and Humidity",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "834292dc12e6e6a9",
        "type": "tab",
        "label": "Status",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2551a8a3e7230303",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#26a51d",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#26a51d",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#26a51d",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#3edb33",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#26a51d",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "5d4133c9155fdfa4",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "4bd628c619506e78",
        "type": "mongodb3",
        "uri": "mongodb+srv://juinkinn:22127478@iot.8xeuq.mongodb.net/?retryWrites=true&w=majority&appName=iot",
        "name": "IOT",
        "options": "",
        "parallelism": "-1"
    },
    {
        "id": "d502d27466fdea61",
        "type": "mongodb3",
        "uri": "mongodb+srv://juinkinn:22127478@iot.8xeuq.mongodb.net/?retryWrites=true&w=majority&appName=iot",
        "name": "IOT",
        "options": "",
        "parallelism": "-1"
    },
    {
        "id": "6ee65539a4a175c9",
        "type": "ui_group",
        "name": "Wokwi",
        "tab": "19288c10028a87da",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "19288c10028a87da",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "cb602cb639189da6",
        "type": "ui_tab",
        "name": "SignUpTab",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "92c8ffd21bd1d8dc",
        "type": "ui_group",
        "name": "Trang Đăng Ký",
        "tab": "cb602cb639189da6",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a91ad6bdde3226a9",
        "type": "ui_tab",
        "name": "LogInTab",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a53a829c94639ee3",
        "type": "ui_tab",
        "name": "StatusTab",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "013f802d82ed5fc6",
        "type": "ui_group",
        "name": "Trang Quản Lý",
        "tab": "a53a829c94639ee3",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ece0c58ed53376a1",
        "type": "ui_group",
        "name": "ReadFromThingSpeak",
        "tab": "19288c10028a87da",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "52b92d11329a01c8",
        "type": "ui_group",
        "name": "Chart",
        "tab": "19288c10028a87da",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "90954682dad95d90",
        "type": "pushsafer-notification-template",
        "name": "Thông báo",
        "title": "",
        "icon": "",
        "iconcolor": "#ff000d",
        "sound": "5",
        "vibration": "2",
        "priority": "2",
        "devices": "",
        "timetolive": "0",
        "retry": "60",
        "expire": "",
        "answer": "0",
        "url": "",
        "urltitle": "",
        "image": "",
        "image2": "",
        "image3": ""
    },
    {
        "id": "1ce47892b983c27e",
        "type": "pushsafer-api-key",
        "name": ""
    },
    {
        "id": "832deafdf059bc4a",
        "type": "ui_group",
        "name": "Trang Đăng Nhập",
        "tab": "a91ad6bdde3226a9",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c057b375f9947317",
        "type": "ui_form",
        "z": "ee3c28a49a9232a5",
        "name": "",
        "label": "Sign Up",
        "group": "92c8ffd21bd1d8dc",
        "order": 0,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Name",
                "value": "Name",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Email",
                "value": "Email",
                "type": "email",
                "required": true,
                "rows": null
            },
            {
                "label": "Username",
                "value": "Username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "Password",
                "type": "password",
                "required": true,
                "rows": null
            },
            {
                "label": "Confirm Password",
                "value": "ConfirmPassword",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "Name": "",
            "Email": "",
            "Username": "",
            "Password": "",
            "ConfirmPassword": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 60,
        "y": 100,
        "wires": [
            [
                "79c776de50d457a6"
            ]
        ]
    },
    {
        "id": "a04452a0b5b0704f",
        "type": "ui_ui_control",
        "z": "ee3c28a49a9232a5",
        "name": "",
        "events": "all",
        "x": 1120,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "c306764f32ad5e85",
        "type": "change",
        "z": "ee3c28a49a9232a5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t    \"tab\":\t    \"LogInTab\"\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 300,
        "wires": [
            [
                "a04452a0b5b0704f",
                "c16ccdf8c8d64872"
            ]
        ]
    },
    {
        "id": "79c776de50d457a6",
        "type": "function",
        "z": "ee3c28a49a9232a5",
        "name": "Check password and already exsist account",
        "func": "if (msg.payload.Password === msg.payload.ConfirmPassword) {\n    msg.payload = {\n        Password: msg.payload.Password,\n        Name: msg.payload.Name,\n        Username: msg.payload.Username,\n        Email: msg.payload.Email\n    };\n    return msg;\n} else {\n    msg.payload = 'Incorrect password confirmation'\n    return msg; // Stops the flow if passwords do not match\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 180,
        "wires": [
            [
                "68f7966a93a0922c"
            ],
            [
                "d82eb44c156cce1b"
            ]
        ]
    },
    {
        "id": "8d4b45f00e89bd8e",
        "type": "ui_toast",
        "z": "ee3c28a49a9232a5",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1070,
        "y": 180,
        "wires": []
    },
    {
        "id": "68f7966a93a0922c",
        "type": "mongodb3 in",
        "z": "ee3c28a49a9232a5",
        "service": "_ext_",
        "configNode": "d502d27466fdea61",
        "name": "db",
        "collection": "juinkinn",
        "operation": "insertOne",
        "x": 590,
        "y": 180,
        "wires": [
            [
                "c306764f32ad5e85"
            ]
        ]
    },
    {
        "id": "c16ccdf8c8d64872",
        "type": "function",
        "z": "ee3c28a49a9232a5",
        "name": "Signup Success",
        "func": "msg.payload = 'Signup successfully'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 180,
        "wires": [
            [
                "8d4b45f00e89bd8e"
            ]
        ]
    },
    {
        "id": "d851ca6f62b708a0",
        "type": "ui_button",
        "z": "ee3c28a49a9232a5",
        "name": "",
        "group": "92c8ffd21bd1d8dc",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "button switch to login",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 140,
        "y": 580,
        "wires": [
            [
                "7c75df07565d1e95"
            ]
        ]
    },
    {
        "id": "7c75df07565d1e95",
        "type": "function",
        "z": "ee3c28a49a9232a5",
        "name": "sign in",
        "func": "msg.payload = {\n    \"tab\": \"LogInTab\"\n}\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 580,
        "wires": [
            [
                "e862c37fa9e04823"
            ]
        ]
    },
    {
        "id": "e862c37fa9e04823",
        "type": "ui_ui_control",
        "z": "ee3c28a49a9232a5",
        "name": "To login",
        "events": "all",
        "x": 500,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "d82eb44c156cce1b",
        "type": "ui_toast",
        "z": "ee3c28a49a9232a5",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 610,
        "y": 80,
        "wires": []
    },
    {
        "id": "8d0aa9eba2aa59bc",
        "type": "ui_form",
        "z": "c2bd6d05e17f1aeb",
        "name": "",
        "label": "Log In",
        "group": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "Username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "Password",
                "type": "password",
                "required": true,
                "rows": null
            },
            {
                "label": "Email",
                "value": "Email",
                "type": "email",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "Username": "",
            "Password": "",
            "Email": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 50,
        "y": 120,
        "wires": [
            [
                "819666c96d9c0761"
            ]
        ]
    },
    {
        "id": "f1e830128a9db23a",
        "type": "ui_ui_control",
        "z": "c2bd6d05e17f1aeb",
        "name": "",
        "events": "all",
        "x": 860,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "97a3967246d3710d",
        "type": "ui_toast",
        "z": "c2bd6d05e17f1aeb",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 870,
        "y": 240,
        "wires": []
    },
    {
        "id": "508f969eba2dda9a",
        "type": "function",
        "z": "c2bd6d05e17f1aeb",
        "name": "Check login",
        "func": "var dbuser = msg.payload.dbUser;\nvar dbpass = msg.payload.dbPass;\nvar dbemail = msg.payload.dbEmail;\n\n// Extract input password\nvar inputPassword = msg.payload.Password;\nvar inputUser = msg.payload.Username;\nmsg.payload = 0; // Initialize to 0 before checking\n\n// Check if user exists and validate credentials\nif (dbuser !== undefined && dbpass !== undefined) {\n    if (inputPassword === dbpass && inputUser === dbuser) {\n        msg.payload = 1; // Set to 1 for success\n    }\n} else { // User not found\n    msg.payload = 0; // Set to 0 if no user found or invalid credentials\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 300,
        "wires": [
            [
                "620d08f35c11e4ec"
            ]
        ]
    },
    {
        "id": "c03c6b1cdc36db05",
        "type": "ui_button",
        "z": "c2bd6d05e17f1aeb",
        "name": "",
        "group": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "button switch to sign up",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 440,
        "wires": [
            [
                "a2e34de092af504a"
            ]
        ]
    },
    {
        "id": "a2e34de092af504a",
        "type": "function",
        "z": "c2bd6d05e17f1aeb",
        "name": "sign in",
        "func": "msg.payload = {\n    \"tab\": \"SignUpTab\"\n}\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 440,
        "wires": [
            [
                "0fe4a6a9f6502bc9"
            ]
        ]
    },
    {
        "id": "0fe4a6a9f6502bc9",
        "type": "ui_ui_control",
        "z": "c2bd6d05e17f1aeb",
        "name": "To signup",
        "events": "all",
        "x": 480,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "819666c96d9c0761",
        "type": "mongodb3 in",
        "z": "c2bd6d05e17f1aeb",
        "service": "_ext_",
        "configNode": "d502d27466fdea61",
        "name": "db",
        "collection": "juinkinn",
        "operation": "findOne",
        "x": 130,
        "y": 220,
        "wires": [
            [
                "c533103b2f68a436"
            ]
        ]
    },
    {
        "id": "620d08f35c11e4ec",
        "type": "switch",
        "z": "c2bd6d05e17f1aeb",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 160,
        "wires": [
            [
                "6bbc2e83e54b8500",
                "92ddcc6a1a1ae596",
                "caf85af214712dd2"
            ],
            [
                "a8dccae0ab80ea99"
            ]
        ]
    },
    {
        "id": "c533103b2f68a436",
        "type": "function",
        "z": "c2bd6d05e17f1aeb",
        "name": "store query results",
        "func": "msg.payload.dbPass = msg.payload.Password;\nmsg.payload.dbName = msg.payload.Name;\nmsg.payload.dbUser = msg.payload.Username;\nmsg.payload.dbEmail = msg.payload.Email;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 300,
        "wires": [
            [
                "508f969eba2dda9a",
                "c7c1e1fdd9e43b38"
            ]
        ]
    },
    {
        "id": "6bbc2e83e54b8500",
        "type": "change",
        "z": "c2bd6d05e17f1aeb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t    \"tabs\":{\t        \"hide\":[\t            \"SignUpTab\",\t            \"LogInTab\"\t        ]\t    }\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 40,
        "wires": [
            [
                "f1e830128a9db23a"
            ]
        ]
    },
    {
        "id": "92ddcc6a1a1ae596",
        "type": "change",
        "z": "c2bd6d05e17f1aeb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t    \"tab\":\t    \"Home\"\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 80,
        "wires": [
            [
                "f1e830128a9db23a"
            ]
        ]
    },
    {
        "id": "a8dccae0ab80ea99",
        "type": "function",
        "z": "c2bd6d05e17f1aeb",
        "name": "Fail msg",
        "func": "msg.payload = 'Login failed'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 180,
        "wires": [
            [
                "97a3967246d3710d"
            ]
        ]
    },
    {
        "id": "caf85af214712dd2",
        "type": "function",
        "z": "c2bd6d05e17f1aeb",
        "name": "Success msg",
        "func": "msg.payload = 'Login successfully'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 140,
        "wires": [
            [
                "f3fbd3e734acd26e"
            ]
        ]
    },
    {
        "id": "f3fbd3e734acd26e",
        "type": "ui_toast",
        "z": "c2bd6d05e17f1aeb",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 890,
        "y": 120,
        "wires": []
    },
    {
        "id": "c7c1e1fdd9e43b38",
        "type": "debug",
        "z": "c2bd6d05e17f1aeb",
        "name": "check login results",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 380,
        "wires": []
    },
    {
        "id": "9c75a8e4d67750b4",
        "type": "mqtt in",
        "z": "4a7095bf9f591689",
        "name": "",
        "topic": "/wateringTKMQ/temp",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "5d4133c9155fdfa4",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 1160,
        "wires": [
            [
                "0a22d299e1721f4e",
                "94a0dec660cb698f"
            ]
        ]
    },
    {
        "id": "0a22d299e1721f4e",
        "type": "ui_gauge",
        "z": "4a7095bf9f591689",
        "name": "",
        "group": "6ee65539a4a175c9",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Temperature",
        "label": "units",
        "format": "{{value}}",
        "min": "-10",
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "50",
        "diff": false,
        "className": "",
        "x": 410,
        "y": 1220,
        "wires": []
    },
    {
        "id": "6af42424ae9c1e13",
        "type": "mqtt in",
        "z": "4a7095bf9f591689",
        "name": "",
        "topic": "/wateringTKMQ/humid",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "5d4133c9155fdfa4",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 1300,
        "wires": [
            [
                "060ccc9d27a71a7e",
                "c24ac60973c60dce"
            ]
        ]
    },
    {
        "id": "060ccc9d27a71a7e",
        "type": "ui_gauge",
        "z": "4a7095bf9f591689",
        "name": "",
        "group": "6ee65539a4a175c9",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Humidity",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "50",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 400,
        "y": 1360,
        "wires": []
    },
    {
        "id": "25de9ebf50ceb695",
        "type": "ui_button",
        "z": "4a7095bf9f591689",
        "name": "Logout",
        "group": "6ee65539a4a175c9",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Logout",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 2180,
        "wires": [
            [
                "4629d5be8fc76b2b"
            ]
        ]
    },
    {
        "id": "4629d5be8fc76b2b",
        "type": "function",
        "z": "4a7095bf9f591689",
        "name": "Logout",
        "func": "msg.payload = {\n    \"tab\": \"LogInTab\"\n}\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 2180,
        "wires": [
            [
                "3f584a58ccaa73fc"
            ]
        ]
    },
    {
        "id": "3f584a58ccaa73fc",
        "type": "ui_ui_control",
        "z": "4a7095bf9f591689",
        "name": "Logout",
        "events": "all",
        "x": 490,
        "y": 2180,
        "wires": [
            []
        ]
    },
    {
        "id": "5d6896d54eceeaeb",
        "type": "thingspeak42",
        "z": "4a7095bf9f591689",
        "name": "",
        "delay": "15",
        "topic1": "Temperature",
        "topic2": "Humidity",
        "topic3": "",
        "topic4": "",
        "topic5": "",
        "topic6": "",
        "topic7": "",
        "topic8": "",
        "endpoint": "https://thingspeak.mathworks.com/",
        "x": 630,
        "y": 1240,
        "wires": []
    },
    {
        "id": "94a0dec660cb698f",
        "type": "change",
        "z": "4a7095bf9f591689",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Temperature",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 1160,
        "wires": [
            [
                "5d6896d54eceeaeb"
            ]
        ]
    },
    {
        "id": "c24ac60973c60dce",
        "type": "change",
        "z": "4a7095bf9f591689",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Humidity",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 1300,
        "wires": [
            [
                "5d6896d54eceeaeb"
            ]
        ]
    },
    {
        "id": "9d94ddaf9701fe08",
        "type": "comment",
        "z": "4a7095bf9f591689",
        "name": "đọc từ thingspeak để làm average humid and temp",
        "info": "",
        "x": 230,
        "y": 1960,
        "wires": []
    },
    {
        "id": "261a96a19998938f",
        "type": "http request",
        "z": "4a7095bf9f591689",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/2779429/fields/1.json?api_key=VDIUIVFT61I4DQ0I",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 290,
        "y": 2020,
        "wires": [
            [
                "430e15889db7f096"
            ]
        ]
    },
    {
        "id": "0d3c7fe4c0fdf01a",
        "type": "inject",
        "z": "4a7095bf9f591689",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 2020,
        "wires": [
            [
                "261a96a19998938f"
            ]
        ]
    },
    {
        "id": "8ddd8db87eef7f2a",
        "type": "function",
        "z": "4a7095bf9f591689",
        "name": " average temperature",
        "func": "let feeds = msg.payload.feeds; // Array of data\nlet totalTemp = 0;\nlet count = 0;\n\n// Lấy ngày hiện tại\nlet currentDate = new Date();\nlet startOfDay = new Date(currentDate.setHours(0, 0, 0, 0)); // 00:00 hôm nay\nlet endOfDay = new Date(currentDate.setHours(23, 59, 59, 999)); // 23:59 hôm nay\n\n// Lọc các bản ghi thuộc ngày hôm nay\nfeeds.forEach(feed => {\n    let timestamp = new Date(feed.created_at); // Lấy timestamp của bản ghi\n    if (timestamp >= startOfDay && timestamp <= endOfDay) {\n        // Nếu bản ghi thuộc ngày hôm nay, cộng dồn giá trị nhiệt độ\n        if (feed.field1) {\n            totalTemp += parseFloat(feed.field1);\n            count++;\n        }\n    }\n});\n\n// Tính giá trị trung bình (average)\nlet avgTemp = count > 0 ? totalTemp / count : 0;\n\n// Làm tròn kết quả\navgTemp = Math.round(avgTemp * 10) / 10;\n\n// Trả về kết quả\nmsg.payload = avgTemp;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 2020,
        "wires": [
            [
                "821eee052caf44be"
            ]
        ]
    },
    {
        "id": "2747696ddd58c668",
        "type": "http request",
        "z": "4a7095bf9f591689",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/2779429/fields/2.json?api_key=VDIUIVFT61I4DQ0I",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 290,
        "y": 2100,
        "wires": [
            [
                "eef77c1fd6edf7f8"
            ]
        ]
    },
    {
        "id": "d357056f2c33aeb7",
        "type": "function",
        "z": "4a7095bf9f591689",
        "name": "average humidity",
        "func": "let feeds = msg.payload.feeds; // Array of data\nlet totalHumidity = 0;\nlet count = 0;\n\n// Lấy ngày hiện tại\nlet currentDate = new Date();\nlet startOfDay = new Date(currentDate.setHours(0, 0, 0, 0)); // 00:00 hôm nay\nlet endOfDay = new Date(currentDate.setHours(23, 59, 59, 999)); // 23:59 hôm nay\n\n// Lọc các bản ghi thuộc ngày hôm nay\nfeeds.forEach(feed => {\n    let timestamp = new Date(feed.created_at); // Lấy timestamp của bản ghi\n    if (timestamp >= startOfDay && timestamp <= endOfDay) {\n        // Nếu bản ghi thuộc ngày hôm nay, cộng dồn giá trị độ ẩm\n        if (feed.field2) {\n            totalHumidity += parseFloat(feed.field2); // Parse field2 values\n            count++;\n        }\n    }\n});\n\n// Tính giá trị trung bình (average) của độ ẩm\nlet avgHumidity = count > 0 ? totalHumidity / count : 0;\n\n// Làm tròn kết quả\navgHumidity = Math.round(avgHumidity * 10) / 10;\n\n// Trả về kết quả\nmsg.payload = avgHumidity;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2100,
        "wires": [
            [
                "a9935a8c3ba2ec2d"
            ]
        ]
    },
    {
        "id": "821eee052caf44be",
        "type": "ui_gauge",
        "z": "4a7095bf9f591689",
        "name": "",
        "group": "ece0c58ed53376a1",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Average Temperature ",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "50",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "20",
        "seg2": "40",
        "diff": false,
        "className": "",
        "x": 900,
        "y": 2020,
        "wires": []
    },
    {
        "id": "a9935a8c3ba2ec2d",
        "type": "ui_gauge",
        "z": "4a7095bf9f591689",
        "name": "",
        "group": "ece0c58ed53376a1",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Average Humidity",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "50",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 890,
        "y": 2100,
        "wires": []
    },
    {
        "id": "dfa312ec2da30c79",
        "type": "inject",
        "z": "4a7095bf9f591689",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 2100,
        "wires": [
            [
                "2747696ddd58c668"
            ]
        ]
    },
    {
        "id": "430e15889db7f096",
        "type": "json",
        "z": "4a7095bf9f591689",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 450,
        "y": 2020,
        "wires": [
            [
                "8ddd8db87eef7f2a"
            ]
        ]
    },
    {
        "id": "eef77c1fd6edf7f8",
        "type": "json",
        "z": "4a7095bf9f591689",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 450,
        "y": 2100,
        "wires": [
            [
                "d357056f2c33aeb7"
            ]
        ]
    },
    {
        "id": "7b45af13be1d332c",
        "type": "ui_chart",
        "z": "4a7095bf9f591689",
        "name": "",
        "group": "52b92d11329a01c8",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Temperature Chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 850,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "f8b256ae63fbf1f8",
        "type": "ui_chart",
        "z": "4a7095bf9f591689",
        "name": "",
        "group": "52b92d11329a01c8",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Humidity Chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 840,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "16f46025d3f892cd",
        "type": "inject",
        "z": "4a7095bf9f591689",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1840,
        "wires": [
            [
                "83e9389205d7ac18"
            ]
        ]
    },
    {
        "id": "0a61714626e00d67",
        "type": "inject",
        "z": "4a7095bf9f591689",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1900,
        "wires": [
            [
                "e5398d65240445ad"
            ]
        ]
    },
    {
        "id": "83e9389205d7ac18",
        "type": "http request",
        "z": "4a7095bf9f591689",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/2779429/fields/1.json?api_key=VDIUIVFT61I4DQ0I",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 310,
        "y": 1840,
        "wires": [
            [
                "e254697a73e3ca93"
            ]
        ]
    },
    {
        "id": "e5398d65240445ad",
        "type": "http request",
        "z": "4a7095bf9f591689",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/2779429/fields/2.json?api_key=VDIUIVFT61I4DQ0I",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 310,
        "y": 1900,
        "wires": [
            [
                "73b51a874ca658b0"
            ]
        ]
    },
    {
        "id": "e254697a73e3ca93",
        "type": "json",
        "z": "4a7095bf9f591689",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 470,
        "y": 1840,
        "wires": [
            [
                "f642b2cdc1acebbf"
            ]
        ]
    },
    {
        "id": "73b51a874ca658b0",
        "type": "json",
        "z": "4a7095bf9f591689",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 470,
        "y": 1900,
        "wires": [
            [
                "d3e2cfad67b2b167"
            ]
        ]
    },
    {
        "id": "f642b2cdc1acebbf",
        "type": "function",
        "z": "4a7095bf9f591689",
        "name": "read temperature",
        "func": "let feeds = msg.payload.feeds; // Array of data\n\nif (feeds.length > 0) {\n    // Lấy giá trị field1 (nhiệt độ) từ bản ghi gần nhất\n    let latestTemp = parseFloat(feeds[feeds.length - 1].field1);\n\n    // Return giá trị gần nhất\n    msg.payload = latestTemp;\n} else {\n    msg.payload = \"No data latestTemp available\"; // Trường hợp không có dữ liệu\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1840,
        "wires": [
            [
                "7b45af13be1d332c"
            ]
        ]
    },
    {
        "id": "d3e2cfad67b2b167",
        "type": "function",
        "z": "4a7095bf9f591689",
        "name": "read humidity",
        "func": "let feeds = msg.payload.feeds; // Array of data\n\nif (feeds.length > 0) {\n    // Lấy giá trị field1 (nhiệt độ) từ bản ghi gần nhất\n    let latestHumidity = parseFloat(feeds[feeds.length - 1].field2);\n\n    // Return giá trị gần nhất\n    msg.payload = latestHumidity;\n} else {\n    msg.payload = \"No data latestHumidity available\"; // Trường hợp không có dữ liệu\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1900,
        "wires": [
            [
                "f8b256ae63fbf1f8"
            ]
        ]
    },
    {
        "id": "c1c987bc87061968",
        "type": "e-mail",
        "z": "4a7095bf9f591689",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "",
        "dname": "",
        "x": 1090,
        "y": 840,
        "wires": []
    },
    {
        "id": "cce819b04565cd78",
        "type": "comment",
        "z": "4a7095bf9f591689",
        "name": "Gửi mail thông báo nhiệt độ, độ ẩm || Test nhớ nối inject vào",
        "info": "",
        "x": 280,
        "y": 860,
        "wires": []
    },
    {
        "id": "74d464e2883720cf",
        "type": "function",
        "z": "4a7095bf9f591689",
        "name": "gửi mail cảnh báo nhiệt độ",
        "func": "// // Initialize the notification state for high and low temperature\n// let notifiedHigh = context.get('notifiedHigh') || false;\n// let notifiedLow = context.get('notifiedLow') || false;\n\n// // Get the stored email address from login results\n// let dbEmail = msg.payload.Email; // Email to send the notification\n// msg.payload.dbEmail = msg.payload.Email;\n// // Get the feeds data from the HTTP request\n// let feeds = msg.payload.feeds; // Array of data\n\n// if (feeds.length > 0) {\n//     // Extract the latest temperature\n//     let latestTemp = parseFloat(feeds[feeds.length - 1].field1);\n\n//     // Check for high temperature alert\n//     if (latestTemp > 30) {\n//         if (!notifiedHigh) {\n//             // Send high temperature notification\n//             context.set('notifiedHigh', true); // Mark as notified\n//             context.set('notifiedLow', false); // Reset low temp notification state\n//             msg.topic = \"Cảnh báo nhiệt độ cao\";\n//             msg.payload = `Cảnh báo! Nhiệt độ cao: ${latestTemp}°C.`;\n//   //          msg.to = dbEmail; // Set recipient email\n//             return msg; // Send the email\n//         } else {\n//             return null; // Already notified, do nothing\n//         }\n//     }\n\n//     // Check for low temperature alert\n//     if (latestTemp < 18) {\n//         if (!notifiedLow) {\n//             // Send low temperature notification\n//             context.set('notifiedLow', true); // Mark as notified\n//             context.set('notifiedHigh', false); // Reset high temp notification state\n//             msg.topic = \"Cảnh báo nhiệt độ thấp\";\n//             msg.payload = `Cảnh báo! Nhiệt độ thấp: ${latestTemp}°C.`;\n//        //     msg.to = dbEmail; // Set recipient email\n//             return msg; // Send the email\n//         } else {\n//             return null; // Already notified, do nothing\n//         }\n//     }\n\n//     // Reset notification states when temperature is normal\n//     if (latestTemp >= 18 && latestTemp <= 30) {\n//         context.set('notifiedHigh', false);\n//         context.set('notifiedLow', false);\n//         msg.payload = latestTemp; // Pass the temperature for display in the gauge\n//         return msg; // Continue to next node, no notification\n//     }\n// } else {\n//     msg.payload = \"No data available\"; // No feeds, handle error\n//     return msg; // Send error message\n// }\n\n\n\n// Initialize the notification state for high and low temperature\nlet notifiedHigh = context.get('notifiedHigh') || false;\nlet notifiedLow = context.get('notifiedLow') || false;\n\n// Get the stored email address from the global context\nlet dbEmail = global.get(\"userEmail\"); // Retrieve the stored email\nmsg.payload.dbEmail = dbEmail; // Store the email in msg.payload for reference\n\n// Get the feeds data from the HTTP request\nlet feeds = msg.payload.feeds; // Array of data\n\nif (feeds.length > 0) {\n    // Extract the latest temperature\n    let latestTemp = parseFloat(feeds[feeds.length - 1].field1);\n\n    // Check for high temperature alert\n    if (latestTemp > 30) {\n        if (!notifiedHigh) {\n            // Send high temperature notification\n            context.set('notifiedHigh', true); // Mark as notified\n            context.set('notifiedLow', false); // Reset low temp notification state\n            msg.topic = `Cảnh báo! Nhiệt độ cao: ${latestTemp}°C.`;\n            msg.payload = `Cảnh báo! Nhiệt độ cao: ${latestTemp}°C.`;\n            msg.to = dbEmail; // Set recipient email\n            return msg; // Send the email\n        } else {\n            return null; // Already notified, do nothing\n        }\n    }\n\n    // Check for low temperature alert\n    if (latestTemp < 18) {\n        if (!notifiedLow) {\n            // Send low temperature notification\n            context.set('notifiedLow', true); // Mark as notified\n            context.set('notifiedHigh', false); // Reset high temp notification state\n            msg.topic = `Cảnh báo! Nhiệt độ thấp: ${latestTemp}°C.`;\n            msg.payload = `Cảnh báo! Nhiệt độ thấp: ${latestTemp}°C.`;\n            msg.to = dbEmail; // Set recipient email\n            return msg; // Send the email\n        } else {\n            return null; // Already notified, do nothing\n        }\n    }\n\n    // Reset notification states when temperature is normal\n    if (latestTemp >= 18 && latestTemp <= 30) {\n        context.set('notifiedHigh', false);\n        context.set('notifiedLow', false);\n        msg.payload = latestTemp; // Pass the temperature for display in the gauge\n        return msg; // Continue to next node, no notification\n    }\n} else {\n    msg.payload = \"No data available\"; // No feeds, handle error\n    return msg; // Send error message\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 900,
        "wires": [
            [
                "c1c987bc87061968",
                "06e73f36e350b59f"
            ]
        ]
    },
    {
        "id": "7ec68795ecd79a7b",
        "type": "http request",
        "z": "4a7095bf9f591689",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/2779429/fields/1.json?api_key=VDIUIVFT61I4DQ0I",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 290,
        "y": 920,
        "wires": [
            [
                "99a78ad2660ed3c5"
            ]
        ]
    },
    {
        "id": "99a78ad2660ed3c5",
        "type": "json",
        "z": "4a7095bf9f591689",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 490,
        "y": 920,
        "wires": [
            [
                "74d464e2883720cf"
            ]
        ]
    },
    {
        "id": "51c2f28767e610e3",
        "type": "http request",
        "z": "4a7095bf9f591689",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/2779429/fields/2.json?api_key=VDIUIVFT61I4DQ0I",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 290,
        "y": 1020,
        "wires": [
            [
                "2b2abe27867c91fb"
            ]
        ]
    },
    {
        "id": "2b2abe27867c91fb",
        "type": "json",
        "z": "4a7095bf9f591689",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 490,
        "y": 1040,
        "wires": [
            [
                "b64aafa4e4e7c283"
            ]
        ]
    },
    {
        "id": "b64aafa4e4e7c283",
        "type": "function",
        "z": "4a7095bf9f591689",
        "name": "gửi mail cảnh báo độ ẩm",
        "func": "// // Initialize the notification state for high and low humidity\n// let notifiedHigh = context.get('notifiedHigh') || false;\n// let notifiedLow = context.get('notifiedLow') || false;\n\n// // Get the stored email address from login results\n// //let dbEmail = msg.payload.Email; // Email to send the notification\n\n// // Get the feeds data from the HTTP request\n// let feeds = msg.payload.feeds; // Array of data\n\n// if (feeds.length > 0) {\n//     // Extract the latest humidity\n//     let latestHumidity = parseFloat(feeds[feeds.length - 1].field2);\n\n//     // Check for high humidity alert\n//     if (latestHumidity > 70) {\n//         if (!notifiedHigh) {\n//             // Send high humidity notification\n//             context.set('notifiedHigh', true); // Mark as notified\n//             context.set('notifiedLow', false); // Reset low humidity notification state\n//             msg.topic = \"Cảnh báo độ ẩm cao\";\n//             msg.payload = `Cảnh báo! Độ ẩm cao: ${latestHumidity}%.`;\n//   //          msg.to = dbEmail; // Set recipient email\n//             return msg; // Send the email\n//         } else {\n//             return null; // Already notified, do nothing\n//         }\n//     }\n\n//     // Check for low humidity alert\n//     if (latestHumidity < 40) {\n//         if (!notifiedLow) {\n//             // Send low humidity notification\n//             context.set('notifiedLow', true); // Mark as notified\n//             context.set('notifiedHigh', false); // Reset high humidity notification state\n//             msg.topic = \"Cảnh báo độ ẩm thấp\";\n//             msg.payload = `Cảnh báo! Độ ẩm thấp: ${latestHumidity}%.`;\n//     //        msg.to = dbEmail; // Set recipient email\n//             return msg; // Send the email\n//         } else {\n//             return null; // Already notified, do nothing\n//         }\n//     }\n\n//     // Reset notification states when humidity is normal\n//     if (latestHumidity >= 40 && latestHumidity <= 70) {\n//         context.set('notifiedHigh', false);\n//         context.set('notifiedLow', false);\n//         msg.payload = latestHumidity; // Pass the humidity for display in the gauge\n//         return msg; // Continue to next node, no notification\n//     }\n// } else {\n//     msg.payload = \"No data available\"; // No feeds, handle error\n//     return msg; // Send error message\n// }\n\n\n\n// Initialize the notification state for high and low humidity\nlet notifiedHigh = context.get('notifiedHigh') || false;\nlet notifiedLow = context.get('notifiedLow') || false;\n\n// Get the stored email address from the global context\nlet dbEmail = global.get(\"userEmail\"); // Retrieve the stored email\n\n// Get the feeds data from the HTTP request\nlet feeds = msg.payload.feeds; // Array of data\n\nif (feeds.length > 0) {\n    // Extract the latest humidity\n    let latestHumidity = parseFloat(feeds[feeds.length - 1].field2);\n\n    // Check for high humidity alert\n    if (latestHumidity > 70) {\n        if (!notifiedHigh) {\n            // Send high humidity notification\n            context.set('notifiedHigh', true); // Mark as notified\n            context.set('notifiedLow', false); // Reset low humidity notification state\n            msg.topic = `Cảnh báo! Độ ẩm cao: ${ latestHumidity }%.`;\n            msg.payload = `Cảnh báo! Độ ẩm cao: ${latestHumidity}%.`;\n            msg.to = dbEmail; // Set recipient email\n            return msg; // Send the email\n        } else {\n            return null; // Already notified, do nothing\n        }\n    }\n\n    // Check for low humidity alert\n    if (latestHumidity < 40) {\n        if (!notifiedLow) {\n            // Send low humidity notification\n            context.set('notifiedLow', true); // Mark as notified\n            context.set('notifiedHigh', false); // Reset high humidity notification state\n            msg.topic = `Cảnh báo! Độ ẩm thấp: ${latestHumidity}%.`;\n            msg.payload = `Cảnh báo! Độ ẩm thấp: ${latestHumidity}%.`;\n            msg.to = dbEmail; // Set recipient email\n            return msg; // Send the email\n        } else {\n            return null; // Already notified, do nothing\n        }\n    }\n\n    // Reset notification states when humidity is normal\n    if (latestHumidity >= 40 && latestHumidity <= 70) {\n        context.set('notifiedHigh', false);\n        context.set('notifiedLow', false);\n        msg.payload = latestHumidity; // Pass the humidity for display in the gauge\n        return msg; // Continue to next node, no notification\n    }\n} else {\n    msg.payload = \"No data available\"; // No feeds, handle error\n    return msg; // Send error message\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1040,
        "wires": [
            [
                "2acf3980ebde8a1b",
                "136c218426289609"
            ]
        ]
    },
    {
        "id": "5c8d19cdf3e9654c",
        "type": "comment",
        "z": "4a7095bf9f591689",
        "name": "Chỉ lấy giá trị gần nhất",
        "info": "",
        "x": 120,
        "y": 1780,
        "wires": []
    },
    {
        "id": "07e77ea9cc52673d",
        "type": "comment",
        "z": "4a7095bf9f591689",
        "name": "Lấy toàn bộ các giá trị",
        "info": "",
        "x": 660,
        "y": 1960,
        "wires": []
    },
    {
        "id": "84f24f19658b9aac",
        "type": "debug",
        "z": "4a7095bf9f591689",
        "name": "debug 41",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 1420,
        "wires": []
    },
    {
        "id": "56bedcc8c04b74c4",
        "type": "comment",
        "z": "4a7095bf9f591689",
        "name": "pushsafer",
        "info": "",
        "x": 80,
        "y": 1460,
        "wires": []
    },
    {
        "id": "d458294a41ba55a4",
        "type": "pushsafer",
        "z": "4a7095bf9f591689",
        "name": "",
        "apikey": "1ce47892b983c27e",
        "notificationtemplate": "90954682dad95d90",
        "x": 880,
        "y": 1480,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f368c39d67892c6e",
        "type": "inject",
        "z": "4a7095bf9f591689",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "2a81d5de47e5770f",
        "type": "inject",
        "z": "4a7095bf9f591689",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 960,
        "wires": [
            [
                "7ec68795ecd79a7b",
                "51c2f28767e610e3"
            ]
        ]
    },
    {
        "id": "c965ee02d98112ec",
        "type": "http request",
        "z": "4a7095bf9f591689",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/2779429/fields/1.json?api_key=VDIUIVFT61I4DQ0I",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 270,
        "y": 1520,
        "wires": [
            [
                "5fd331df2010f769"
            ]
        ]
    },
    {
        "id": "5fd331df2010f769",
        "type": "json",
        "z": "4a7095bf9f591689",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 430,
        "y": 1520,
        "wires": [
            [
                "93d5dbbc569f4266"
            ]
        ]
    },
    {
        "id": "93d5dbbc569f4266",
        "type": "function",
        "z": "4a7095bf9f591689",
        "name": "gửi đth cảnh báo nhiệt độ",
        "func": "// Initialize the notification state for high and low temperature\nlet notifiedHigh = context.get('notifiedHigh') || false;\nlet notifiedLow = context.get('notifiedLow') || false;\n\n// Get the feeds data from the HTTP request\nlet feeds = msg.payload.feeds; // Array of data\n\nif (feeds.length > 0) {\n    // Extract the latest temperature\n    let latestTemp = parseFloat(feeds[feeds.length - 1].field1);\n\n    // Check for high temperature alert\n    if (latestTemp > 30) {\n        if (!notifiedHigh) {\n            // Send high temperature notification\n            context.set('notifiedHigh', true); // Mark as notified\n            context.set('notifiedLow', false); // Reset low temp notification state\n            msg.topic = \"Cảnh báo nhiệt độ cao\";\n            msg.payload = `Nhiệt độ cao: ${latestTemp}°C.`;\n            return msg; // Send the message to Pushsafer node\n        } else {\n            return null; // Already notified, do nothing\n        }\n    }\n\n    // Check for low temperature alert\n    if (latestTemp < 18) {\n        if (!notifiedLow) {\n            // Send low temperature notification\n            context.set('notifiedLow', true); // Mark as notified\n            context.set('notifiedHigh', false); // Reset high temp notification state\n            msg.topic = \"Cảnh báo nhiệt độ thấp\";\n            msg.payload = `Nhiệt độ thấp: ${latestTemp}°C.`;\n            return msg; // Send the message to Pushsafer node\n        } else {\n            return null; // Already notified, do nothing\n        }\n    }\n\n    // Reset notification states when temperature is normal\n    if (latestTemp >= 18 && latestTemp <= 30) {\n        context.set('notifiedHigh', false);\n        context.set('notifiedLow', false);\n        msg.payload = latestTemp; // Pass the temperature for display in the gauge\n        return msg; // Continue to next node, no notification\n    }\n} else {\n    msg.payload = \"No data available\"; // No feeds, handle error\n    return msg; // Send error message\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1520,
        "wires": [
            [
                "d458294a41ba55a4",
                "bae55a39b56b9406"
            ]
        ]
    },
    {
        "id": "bae55a39b56b9406",
        "type": "debug",
        "z": "4a7095bf9f591689",
        "name": "debug noti cảnh báo nhiệt độ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 1580,
        "wires": []
    },
    {
        "id": "19cb59b158376ff0",
        "type": "http request",
        "z": "4a7095bf9f591689",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/2779429/fields/2.json?api_key=VDIUIVFT61I4DQ0I",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 270,
        "y": 1660,
        "wires": [
            [
                "f03705a0af30365e"
            ]
        ]
    },
    {
        "id": "f03705a0af30365e",
        "type": "json",
        "z": "4a7095bf9f591689",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 430,
        "y": 1660,
        "wires": [
            [
                "17ec974fc6b89ebd"
            ]
        ]
    },
    {
        "id": "17ec974fc6b89ebd",
        "type": "function",
        "z": "4a7095bf9f591689",
        "name": "gửi đth cảnh báo độ ẩm",
        "func": "// Initialize the notification state for high and low humidity\nlet notifiedHighHumidity = context.get('notifiedHighHumidity') || false;\nlet notifiedLowHumidity = context.get('notifiedLowHumidity') || false;\n\n// Get the feeds data from the HTTP request\nlet feeds = msg.payload.feeds; // Array of data\n\nif (feeds.length > 0) {\n    // Extract the latest humidity\n    let latestHumidity = parseFloat(feeds[feeds.length - 1].field2);\n\n    // Check for low humidity alert\n    if (latestHumidity < 40) {\n        if (!notifiedLowHumidity) {\n            // Send low humidity notification\n            context.set('notifiedLowHumidity', true); // Mark as notified\n            context.set('notifiedHighHumidity', false); // Reset high humidity notification state\n            msg.topic = \"Cảnh báo độ ẩm thấp\";\n            msg.payload = `Độ ẩm thấp: ${latestHumidity}%.`;\n            return msg; // Send the message to Pushsafer node\n        } else {\n            return null; // Already notified, do nothing\n        }\n    }\n\n    // Check for high humidity alert\n    if (latestHumidity > 70) {\n        if (!notifiedHighHumidity) {\n            // Send high humidity notification\n            context.set('notifiedHighHumidity', true); // Mark as notified\n            context.set('notifiedLowHumidity', false); // Reset low humidity notification state\n            msg.topic = \"Cảnh báo độ ẩm cao\";\n            msg.payload = `Độ ẩm cao: ${latestHumidity}%.`;\n            return msg; // Send the message to Pushsafer node\n        } else {\n            return null; // Already notified, do nothing\n        }\n    }\n\n    // Reset notification states when humidity is in the normal range\n    if (latestHumidity >= 40 && latestHumidity <= 70) {\n        context.set('notifiedHighHumidity', false);\n        context.set('notifiedLowHumidity', false);\n        msg.payload = latestHumidity; // Pass the humidity for display in the gauge\n        return msg; // Continue to next node, no notification\n    }\n} else {\n    msg.payload = \"No data available\"; // No feeds, handle error\n    return msg; // Send error message\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1660,
        "wires": [
            [
                "aee03df207d88b03",
                "14912d342989379e"
            ]
        ]
    },
    {
        "id": "aee03df207d88b03",
        "type": "pushsafer",
        "z": "4a7095bf9f591689",
        "name": "",
        "apikey": "1ce47892b983c27e",
        "notificationtemplate": "90954682dad95d90",
        "x": 880,
        "y": 1640,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "14912d342989379e",
        "type": "debug",
        "z": "4a7095bf9f591689",
        "name": "debug noti cảnh báo độ ẩm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 1700,
        "wires": []
    },
    {
        "id": "089c95e5b9aececb",
        "type": "comment",
        "z": "4a7095bf9f591689",
        "name": "Gửi pushsafer thông báo nhiệt độ, độ ẩm || Test nhớ nối inject vào",
        "info": "",
        "x": 390,
        "y": 1460,
        "wires": []
    },
    {
        "id": "f3088afe2d09ae54",
        "type": "ui_form",
        "z": "4a7095bf9f591689",
        "name": "",
        "label": "Log In",
        "group": "832deafdf059bc4a",
        "order": 0,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "Username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "Password",
                "type": "password",
                "required": true,
                "rows": null
            },
            {
                "label": "Email",
                "value": "Email",
                "type": "email",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "Username": "",
            "Password": "",
            "Email": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 90,
        "y": 600,
        "wires": [
            [
                "a6c2253b993cc89e"
            ]
        ]
    },
    {
        "id": "ae6d808425d5ddcf",
        "type": "ui_ui_control",
        "z": "4a7095bf9f591689",
        "name": "",
        "events": "all",
        "x": 900,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "f22e212006179fe5",
        "type": "ui_toast",
        "z": "4a7095bf9f591689",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1130,
        "y": 360,
        "wires": []
    },
    {
        "id": "7d3548722bb40399",
        "type": "function",
        "z": "4a7095bf9f591689",
        "name": "Check login",
        "func": "var dbuser = msg.payload.dbUser;\nvar dbpass = msg.payload.dbPass;\nvar dbemail = msg.payload.dbEmail;\n\n// Extract input password\nvar inputPassword = msg.payload.Password;\nvar inputUser = msg.payload.Username;\nvar inputEmail = msg.payload.Email;\nmsg.payload = 0; // Initialize to 0 before checking\n\n// Check if user exists and validate credentials\nif (dbuser !== undefined && dbpass !== undefined && dbemail !== undefined) {\n    if (inputPassword === dbpass && inputUser === dbuser && inputEmail) {\n        msg.payload = 1; // Set to 1 for success\n        msg.to = dbemail;\n\n        // Store msg.to in the global context\n        global.set(\"userEmail\", dbemail);\n    }\n} else { // User not found\n    msg.payload = 0; // Set to 0 if no user found or invalid credentials\n    msg.to = null;\n\n    // Clear the global variable if invalid\n    global.set(\"userEmail\", null);\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 400,
        "wires": [
            [
                "2da7ab4efd6589eb"
            ]
        ]
    },
    {
        "id": "a151116203cbcc60",
        "type": "ui_button",
        "z": "4a7095bf9f591689",
        "name": "",
        "group": "832deafdf059bc4a",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "button switch to sign up",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 930,
        "y": 440,
        "wires": [
            [
                "26e10b3ba54232d4"
            ]
        ]
    },
    {
        "id": "26e10b3ba54232d4",
        "type": "function",
        "z": "4a7095bf9f591689",
        "name": "sign in",
        "func": "msg.payload = {\n    \"tab\": \"SignUpTab\"\n}\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 440,
        "wires": [
            [
                "ac817ddc9ceb2c9d"
            ]
        ]
    },
    {
        "id": "ac817ddc9ceb2c9d",
        "type": "ui_ui_control",
        "z": "4a7095bf9f591689",
        "name": "To signup",
        "events": "all",
        "x": 1320,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "a6c2253b993cc89e",
        "type": "mongodb3 in",
        "z": "4a7095bf9f591689",
        "service": "_ext_",
        "configNode": "d502d27466fdea61",
        "name": "db",
        "collection": "juinkinn",
        "operation": "findOne",
        "x": 130,
        "y": 720,
        "wires": [
            [
                "770050032db498d9"
            ]
        ]
    },
    {
        "id": "2da7ab4efd6589eb",
        "type": "switch",
        "z": "4a7095bf9f591689",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 320,
        "wires": [
            [
                "03693705e2783e0c",
                "fe4ffed0da864aae",
                "4fbc55a2a8fcc8b2"
            ],
            [
                "1a17472ff6dcd721"
            ]
        ]
    },
    {
        "id": "770050032db498d9",
        "type": "function",
        "z": "4a7095bf9f591689",
        "name": "store query results",
        "func": "msg.payload.dbPass = msg.payload.Password;\nmsg.payload.dbName = msg.payload.Name;\nmsg.payload.dbUser = msg.payload.Username;\nmsg.payload.dbEmail = msg.payload.Email;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 600,
        "wires": [
            [
                "7d3548722bb40399"
            ]
        ]
    },
    {
        "id": "03693705e2783e0c",
        "type": "change",
        "z": "4a7095bf9f591689",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t    \"tabs\":{\t        \"hide\":[\t            \"SignUpTab\",\t            \"LogInTab\"\t        ]\t    }\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 160,
        "wires": [
            [
                "ae6d808425d5ddcf"
            ]
        ]
    },
    {
        "id": "fe4ffed0da864aae",
        "type": "change",
        "z": "4a7095bf9f591689",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t    \"tab\":\t    \"Home\"\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 200,
        "wires": [
            [
                "ae6d808425d5ddcf"
            ]
        ]
    },
    {
        "id": "1a17472ff6dcd721",
        "type": "function",
        "z": "4a7095bf9f591689",
        "name": "Fail msg",
        "func": "msg.payload = 'Login failed'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 360,
        "wires": [
            [
                "f22e212006179fe5"
            ]
        ]
    },
    {
        "id": "4fbc55a2a8fcc8b2",
        "type": "function",
        "z": "4a7095bf9f591689",
        "name": "Success msg",
        "func": "msg.payload = 'Login successfully';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 460,
        "wires": [
            [
                "83f812e6a8e459be",
                "3c3a44e808a26fee"
            ]
        ]
    },
    {
        "id": "83f812e6a8e459be",
        "type": "ui_toast",
        "z": "4a7095bf9f591689",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1030,
        "y": 240,
        "wires": []
    },
    {
        "id": "06e73f36e350b59f",
        "type": "debug",
        "z": "4a7095bf9f591689",
        "name": "debug mail cảnh báo nhiệt độ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 960,
        "wires": []
    },
    {
        "id": "2acf3980ebde8a1b",
        "type": "e-mail",
        "z": "4a7095bf9f591689",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "",
        "dname": "",
        "x": 1070,
        "y": 1040,
        "wires": []
    },
    {
        "id": "136c218426289609",
        "type": "debug",
        "z": "4a7095bf9f591689",
        "name": "debug mail cảnh báo độ ẩm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 1100,
        "wires": []
    },
    {
        "id": "e677316bf339e0e4",
        "type": "debug",
        "z": "4a7095bf9f591689",
        "name": "debug 42",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 1100,
        "wires": []
    },
    {
        "id": "3c3a44e808a26fee",
        "type": "debug",
        "z": "4a7095bf9f591689",
        "name": "debug 43",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "to",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 580,
        "wires": []
    },
    {
        "id": "d21fbec3771462e6",
        "type": "comment",
        "z": "834292dc12e6e6a9",
        "name": "Các nút bật tắt tính năng như trong báo cáo",
        "info": "",
        "x": 190,
        "y": 60,
        "wires": []
    },
    {
        "id": "ead355184ea4d3f9",
        "type": "ui_switch",
        "z": "834292dc12e6e6a9",
        "name": "",
        "label": "Hệ thống chính",
        "tooltip": "",
        "group": "013f802d82ed5fc6",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 200,
        "y": 140,
        "wires": [
            [
                "b675178164be3664"
            ]
        ]
    },
    {
        "id": "b675178164be3664",
        "type": "function",
        "z": "834292dc12e6e6a9",
        "name": "function 12",
        "func": "var msg1 = {};\nvar msg2 = {};\n\n// Check if the switch button sends true or false\nif (msg.payload === true) {\n    // If true, prepare a success notification\n    msg1.payload = \"ON\";\n    return msg1; // Send msg1 to output 1\n} else if (msg.payload === false) {\n    // If false, prepare a failure notification\n    msg2.payload = \"OFF\";\n    return msg2; // Send msg2 to output 2\n} else {\n    // If the payload is neither true nor false (unexpected case)\n    return null; // Do nothing\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 140,
        "wires": [
            [
                "7dbe3cb7a37ef59a"
            ]
        ]
    },
    {
        "id": "41732f899da9fc32",
        "type": "ui_switch",
        "z": "834292dc12e6e6a9",
        "name": "",
        "label": "Tự động tưới cây",
        "tooltip": "",
        "group": "013f802d82ed5fc6",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 190,
        "y": 180,
        "wires": [
            [
                "0753a34889601feb"
            ]
        ]
    },
    {
        "id": "5576b0a0e9e603af",
        "type": "ui_switch",
        "z": "834292dc12e6e6a9",
        "name": "",
        "label": "Thông báo người dùng",
        "tooltip": "",
        "group": "013f802d82ed5fc6",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 180,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "0e1c5c07ef51df1b",
        "type": "ui_switch",
        "z": "834292dc12e6e6a9",
        "name": "",
        "label": "Tự động điều chỉnh môi trường",
        "tooltip": "",
        "group": "013f802d82ed5fc6",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "84f4e4b2e8dfa8f0"
            ]
        ]
    },
    {
        "id": "0753a34889601feb",
        "type": "function",
        "z": "834292dc12e6e6a9",
        "name": "function 13",
        "func": "var msg1 = {};\nvar msg2 = {};\n\n// Check if the switch button sends true or false\nif (msg.payload === true) {\n    // If true, prepare a success notification\n    msg1.payload = \"ON\";\n    return msg1; // Send msg1 to output 1\n} else if (msg.payload === false) {\n    // If false, prepare a failure notification\n    msg2.payload = \"OFF\";\n    return msg2; // Send msg2 to output 2\n} else {\n    // If the payload is neither true nor false (unexpected case)\n    return null; // Do nothing\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 180,
        "wires": [
            [
                "15c16418b2ca0308"
            ]
        ]
    },
    {
        "id": "84f4e4b2e8dfa8f0",
        "type": "function",
        "z": "834292dc12e6e6a9",
        "name": "function 14",
        "func": "var msg1 = {};\nvar msg2 = {};\n\n// Check if the switch button sends true or false\nif (msg.payload === true) {\n    // If true, prepare a success notification\n    msg1.payload = \"ON\";\n    return msg1; // Send msg1 to output 1\n} else if (msg.payload === false) {\n    // If false, prepare a failure notification\n    msg2.payload = \"OFF\";\n    return msg2; // Send msg2 to output 2\n} else {\n    // If the payload is neither true nor false (unexpected case)\n    return null; // Do nothing\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 220,
        "wires": [
            [
                "53413a37da3513b5"
            ]
        ]
    },
    {
        "id": "3201b1a9f664375f",
        "type": "function",
        "z": "834292dc12e6e6a9",
        "name": "function 15",
        "func": "var msg1 = {};\nvar msg2 = {};\n\n// Check if the switch button sends true or false\nif (msg.payload === true) {\n    // If true, prepare a success notification\n    msg1.payload = \"Tự động điều chỉnh môi trường is ON.\";\n    return [msg1, null]; // Send msg1 to output 1\n} else if (msg.payload === false) {\n    // If false, prepare a failure notification\n    msg2.payload = \"Tự động điều chỉnh môi trường is OFF.\";\n    return [null, msg2]; // Send msg2 to output 2\n} else {\n    // If the payload is neither true nor false (unexpected case)\n    return null; // Do nothing\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "7dbe3cb7a37ef59a",
        "type": "mqtt out",
        "z": "834292dc12e6e6a9",
        "name": "",
        "topic": "/wateringTKMQ/system",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5d4133c9155fdfa4",
        "x": 650,
        "y": 140,
        "wires": []
    },
    {
        "id": "15c16418b2ca0308",
        "type": "mqtt out",
        "z": "834292dc12e6e6a9",
        "name": "",
        "topic": "/wateringTKMQ/autowatering",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5d4133c9155fdfa4",
        "x": 660,
        "y": 180,
        "wires": []
    },
    {
        "id": "53413a37da3513b5",
        "type": "mqtt out",
        "z": "834292dc12e6e6a9",
        "name": "",
        "topic": "/wateringTKMQ/env",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5d4133c9155fdfa4",
        "x": 640,
        "y": 220,
        "wires": []
    }
]